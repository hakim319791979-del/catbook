name: Flutter Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.3'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor -v

      - name: Ensure Android config
        run: |
          test -f android/gradlew || flutter create .
          echo "sdk.dir=/usr/local/android-sdk" > android/local.properties
          chmod +x android/gradlew

      - name: Ensure assets
        run: |
          mkdir -p assets/images
          test -f assets/images/cat_default.png || curl -L https://placekitten.com/400/400 -o assets/images/cat_default.png

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze (non-blocking)
        continue-on-error: true
        run: flutter analyze

      - name: Clean
        run: |
          flutter clean
          flutter pub get

      - name: Build APK (release, split per ABI)
        id: build_release
        continue-on-error: true
        run: |
          flutter build apk --release -v --split-per-abi -Ptarget-platform=android-arm,android-arm64

      - name: Fallback assembleRelease
        if: steps.build_release.outcome == 'failure'
        working-directory: android
        continue-on-error: true
        run: ./gradlew assembleRelease --stacktrace --info

      - name: Build AAB (optional)
        continue-on-error: true
        run: flutter build appbundle --release -v

      - name: Debug artifact paths
        if: always()
        run: |
          echo "=== SEARCH *.apk / *.aab ==="
          find build -type f \( -name "*.apk" -o -name "*.aab" \) -printf "%p\n" || true
          echo "=== OUTPUTS ==="
          ls -R build/app/outputs || true
          ls -R android/app/build/outputs || true

      - name: Collect artifacts
        if: always()
        run: |
          mkdir -p dist
          find build -type f -name "*.apk" -exec cp -v {} dist/ \; || true
          find build -type f -name "*.aab" -exec cp -v {} dist/ \; || true
          ls -l dist || true

      - name: Fail if none
        if: always()
        run: |
          test -n "$(ls -1 dist 2>/dev/null | grep -E '\.(apk|aab)$' || true)" || { echo "No APK/AAB produced"; exit 1; }

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: catbook-apk
          path: dist/*.apk
          if-no-files-found: error

      - name: Upload AABs
        uses: actions/upload-artifact@v4
        with:
          name: catbook-aab
          path: dist/*.aab
          if-no-files-found: warn